import os
import numpy as np
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder

from part1_preprocessing import preprocess_image, augment_image
from part2_model import build_encoder, build_autoencoder_classifier

def load_data(folder_path):
    """Recorre carpetas, aplica preprocess + augment, y retorna X, y."""
    X, y, errores = [], [], 0
    for root, _, files in os.walk(folder_path):
        label = os.path.basename(root)
        for fname in files:
            if fname.lower().endswith(('.jpg','.jpeg','.png')):
                path = os.path.join(root, fname)
                try:
                    img = preprocess_image(path)
                    aug = augment_image((img.squeeze()*255).astype(np.uint8))
                    aug = aug.astype('float32')/255.0
                    aug = np.expand_dims(aug, -1)
                    X.append(aug); y.append(label)
                except Exception as e:
                    errores += 1
    print(f"Im√°genes cargadas: {len(X)}, errores: {errores}")
    return np.array(X), np.array(y)

def prepare_labels(y):
    le = LabelEncoder()
    y_enc = le.fit_transform(y)
    y_cat = tf.keras.utils.to_categorical(y_enc)
    return y_cat, le

def split_data(X, y_cat, test_size=0.2, random_state=42):
    return train_test_split(X, y_cat, test_size=test_size,
                            random_state=random_state,
                            stratify=y_cat)
